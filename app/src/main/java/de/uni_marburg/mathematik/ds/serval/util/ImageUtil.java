package de.uni_marburg.mathematik.ds.serval.util;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.drawable.Drawable;
import android.support.annotation.DrawableRes;
import android.support.v4.content.res.ResourcesCompat;
import android.util.DisplayMetrics;

import com.google.android.gms.maps.model.BitmapDescriptor;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;

/**
 * A utiliy class for images.
 */
public class ImageUtil {
    
    /**
     * Converting density-independent Pixels to Pixels.
     *
     * @param dp      Density-independent Pixels
     * @param context Calling context
     * @return
     */
    public static int dpToPixels(Context context, int dp) {
        DisplayMetrics metrics = context.getResources().getDisplayMetrics();
        return Math.round(dp * (metrics.xdpi / DisplayMetrics.DENSITY_DEFAULT));
    }
    
    /**
     * Is used to convert {@link android.graphics.drawable.VectorDrawable vector drawables} to a
     * {@link Bitmap bitmap}.
     *
     * @param id The desired resource identifier, as generated by the aapt tool. This integer
     *           encodes the package, type, and resource entry. The value 0 is an invalid
     *           identifier.
     * @return A {@link BitmapDescriptor bitmap descriptor} matching the wanted {@link
     * android.graphics.drawable.VectorDrawable vector drawable}
     */
    public static BitmapDescriptor getBitmapDescriptor(@DrawableRes int id, Context context) {
        Drawable vectorDrawable = ResourcesCompat.getDrawable(context.getResources(), id, null);
        assert vectorDrawable != null;
        Bitmap bitmap = Bitmap.createBitmap(
                vectorDrawable.getIntrinsicWidth(),
                vectorDrawable.getIntrinsicHeight(),
                Bitmap.Config.ARGB_8888
        );
        Canvas canvas = new Canvas(bitmap);
        vectorDrawable.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());
        vectorDrawable.draw(canvas);
        return BitmapDescriptorFactory.fromBitmap(bitmap);
    }
}
