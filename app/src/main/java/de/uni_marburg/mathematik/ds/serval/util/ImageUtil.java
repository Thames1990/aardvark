package de.uni_marburg.mathematik.ds.serval.util;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.VectorDrawable;
import android.support.annotation.DrawableRes;
import android.support.v4.content.res.ResourcesCompat;
import android.util.DisplayMetrics;

import com.google.android.gms.maps.model.BitmapDescriptor;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;

/**
 * A utiliy class for images.
 */
public class ImageUtil {
    
    /**
     * Converting dp to pixel
     */
    public static int dpToPx(int dp, Context context) {
        DisplayMetrics metrics = context.getResources()
                                        .getDisplayMetrics();
        return Math.round(dp * (metrics.xdpi / DisplayMetrics.DENSITY_DEFAULT));
    }
    
    /**
     * Converting color to hex
     *
     * @param color Color to convert
     * @return Hex value of the color
     */
    public static String colorToHex(int color) {
        return Integer.toHexString(color).substring(2);
    }
    
    /**
     * Shifts color to HSV
     *
     * @param color Color to shift
     * @param up    Shift up or down
     * @return HSV representation of the color
     */
    public static int shiftColor(int color, boolean up) {
        float[] hsv = new float[3];
        Color.colorToHSV(color, hsv);
        hsv[2] *= (up ? 1.1f : 0.9f);
        return Color.HSVToColor(hsv);
    }
    
    /**
     * Is used to convert {@link VectorDrawable vector drawables} to a {@link Bitmap bitmap}.
     *
     * @param id The desired resource identifier, as generated by the aapt tool. This integer
     *           encodes the package, type, and resource entry. The value 0 is an invalid
     *           identifier.
     * @return A {@link BitmapDescriptor bitmap descriptor} matching the wanted {@link
     * VectorDrawable vector drawable}
     */
    public static BitmapDescriptor getBitmapDescriptor(@DrawableRes int id, Context context) {
        Drawable vectorDrawable = ResourcesCompat.getDrawable(context.getResources(), id, null);
        assert vectorDrawable != null;
        Bitmap bitmap = Bitmap.createBitmap(
                vectorDrawable.getIntrinsicWidth(),
                vectorDrawable.getIntrinsicHeight(),
                Bitmap.Config.ARGB_8888
        );
        Canvas canvas = new Canvas(bitmap);
        vectorDrawable.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());
        vectorDrawable.draw(canvas);
        return BitmapDescriptorFactory.fromBitmap(bitmap);
    }
}
